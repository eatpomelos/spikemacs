;;; Compiled snippets and support files for `js-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'js-mode
		     '(("try" "try {\n  $0\n} catch (e) {\n  console.log('e=', e)\n}\n" "try { ... } catch (e) { ... }" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/try.yasnippet" nil nil)
		       ("trim" "$0.replace(/^[\\s]+|[\\s]+$/g, '');" "trim" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/trim.yasnippet" nil nil)
		       ("timeout" "setTimeout(() => {\n  $0\n}, 500);\n" "setTimeout(...)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/timeout.js.yasnippet" nil nil)
		       ("timeout" "if(${1:this.inputTimer}) {\n  // kill the un-triggered old timer\n  clearTimeout(${1:$(yas/substr yas-text \"[^ ]*\")});\n  ${1:$(yas/substr yas-text \"[^ ]*\")} = null;\n}\n${1:$(yas/substr yas-text \"[^ ]*\")} = setTimeout(() => {\n  ${1:$(yas/substr yas-text \"[^ ]*\")} = null;\n  if (this.props.onChange) {\n    this.props.onChange($0);\n  }\n}, 250);" "postpone onChange until input stops for a while" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/timeout-onchange.yasnippet" nil nil)
		       ("timeout" "if(!${1:timer}) {\n  ${1:$(yas/substr yas-text \"[^ ]*\")} = setTimeout(() => {\n    ${1:$(yas/substr yas-text \"[^ ]*\")} = null;\n    // do something here\n  }, 250);\n}" "avoid doing sth too frequently" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/timeout-interval.yasnippet" nil nil)
		       ("timeout" "// Usage:\n// var d = delay(function() {}, 500).delay(function() {}, 500).delay(function() {}, 500);\nfunction delay(fn, t) {\n  // private instance variables\n  var queue = [], self, timer;\n  function schedule(fn, t) {\n    timer = setTimeout(() => {\n      timer = null;\n      fn();\n      if (queue.length) {\n        var item = queue.shift();\n        schedule(item.fn, item.t);\n      }\n    }, t);\n  }\n  self = {\n    delay: function(fn, t) {\n      // if already queuing things or running a timer,\n      //   then just add to the queue\n      if (queue.length || timer) {\n        queue.push({fn: fn, t: t});\n      } else {\n        // no queue or timer yet, so schedule the timer\n        schedule(fn, t);\n      }\n      return self;\n    },\n    cancel: function() {\n      clearTimeout(timer);\n      queue = [];\n    }\n  };\n  return self.delay(fn, t);\n}" "chain timeout" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/timeout-chain.yasnippet" nil nil)
		       ("test" "// Executes the search for a match between a regular expression and a specified string. Returns true or false.\n/${1:[a-z]*}/.test('${2:hello}')\n" "regexObject.test(String)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/test.yasnippet" nil nil)
		       ("sty" "const ${1:Title} = styled${2:.div}\\`\n  $0\n\\`;" "styled component snippet" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/styled.yasnippet" nil nil)
		       ("sty" "// Please note innerRef can't be used any more\nconst ${1:StyledDiv} = styled(({${2:myProp}, children, ...rest}) => <${3:button} {...rest}>{children}</${3:$(yas/substr yas-text \"[^ ]*\")}>)\\`\n  $0\n\\`;" "const c = styled(({myProp, children, ..rest}) => ...)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/styled-func.yasnippet" nil nil)
		       ("sty" "\\${({$0}) => 100}px;" "styled component `width: ${({fullscreen}) => fullscreen? 1000 : 50}`" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/styled-css.yasnippet" nil nil)
		       ("str2date" "${1:var str2date} = function(str) {\n  // sample: 2014-06-22 09:00:00\n  var a = str.split(' '),\n      d1 = a[0].split('-'),\n      d2 = a[1].split(':');\n  return new Date(d1[0], (d1[1] - 1), d1[2], d2[0], d2[1], d2[2]);\n};" "str2date" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/str2date.yasnippet" nil nil)
		       ("sort" "${1:arr}.sort(function(a, b) {\n  if (${2:fn}(a) < ${2:$(yas/substr yas-text \"[^ ]*\")}(b)) {\n    $0\n    return -1;\n  }\n  if (${2:$(yas/substr yas-text \"[^ ]*\")}(a) > ${2:$(yas/substr yas-text \"[^ ]*\")}(b)) {\n    return 1;\n  }\n  return 0;\n});" "arr.sort(function(a, b){ f(a) < f(b) ... })" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/sort1.yasnippet" nil nil)
		       ("sort" "${1:arr}.sort(function(a, b) {\n  if (a.${2:prop1} < b.${2:$(yas/substr yas-text \"[^ ]*\")}) {\n    $0\n    return -1;\n  }\n  if (a.${2:$(yas/substr yas-text \"[^ ]*\")} > b.${2:$(yas/substr yas-text \"[^ ]*\")}) {\n    return 1;\n  }\n  return 0;\n});" "arr.sort(function(a, b){ a.prop1 < b.prop1 ... })" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/sort.yasnippet" nil nil)
		       ("sum" "$0.slice(0,i).reduce((a,b) => a+b, 0)" "slice and get sum of array" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/slice-and-sum.yasnippet" nil nil)
		       ("replace" "// swap words\n$0.replace(/(\\w+)\\s+(\\w+)/, '\\$2, \\$1');\n" "str.replace(regexp|substr, newSubStr|function)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/replace.yasnippet" nil nil)
		       ("regex" "new RegExp('\\\\\\\\w')" "new RegExp('...')" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/regex.yasnippet" nil nil)
		       ("?" "? ${1:true} : ${2:false}\n" "? ... : ..." nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/question.mark.yasnippet" nil nil)
		       ("proto.yasnippet" "${1:className}.prototype.${2:methodName} = function(${3:args}) {\n  $0\n}\n" "proto" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/proto.yasnippet" nil nil)
		       ("promise" "${1:promise}.then(function(resp) {\n  // reject and resolve returns a promise\n  if(true) {\n    return ${1:$(yas/substr yas-text \"[^ ]*\")}.resolve(resp);\n  } else {\n    return ${1:$(yas/substr yas-text \"[^ ]*\")}.reject('failed');\n  }\n}).then(function(resp) {\n  console.log('resp=', resp);\n}).catch(function(reason) {\n  console.log('reason=', reason);\n})" "promise usage" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/promise.yasnippet" nil nil)
		       ("main" "#!/usr/bin/env node\n// @see http://shapeshed.com/command-line-utilities-with-nodejs/\nvar args=process.argv.slice(2);\nconsole.log(args);\nconsole.log('hello world');\nprocess.exit(0);\n" "main program for nodejs" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/nodejs-main.snippet" nil nil)
		       ("mod" "(function(exports){\n  $0\n})(window.$1 = {});" "mod" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/mod.yasnippet" nil nil)
		       ("match" "// Executes the search for a match between a regular expression and a specified string. Returns true or false.\n'${1:hello}'.match(/${2:[a-z]*}/)\n" "string.match(RegExp)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/match.yasnippet" nil nil)
		       ("main" "// So you need prepare follow files:\n//   - frontend/index.js (@see react-indexjs.yasnippet)\n//   - frontend/index.template.ejs (used by HtmlWebpackPlugin, @see html5-webpack.yasnippet)\n//   - frontend/components/Home/Home.js\n//   - frontend/components/Dashboard/Dashboard.js\n//   - frontend/styles/ (storing global css files)\n//   - package.json (@see package-reactjs.yasnippet)\n//   - webpack.config.js\n//   - .babelrc (file contents: {\"presets\": [\"react\", [\"es2015\", {\"loose\":true}]], \"plugins\": [\"lodash\", \"transform-object-rest-spread\", \"transform-runtime\"]})\n\nvar LodashModuleReplacementPlugin = require('lodash-webpack-plugin');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\nvar webpack = require('webpack');\nvar path = require('path');\n\nif(!process.env.NODE_ENV) {\n  // make webpack-dev-server happy to run the `webpack`\n  process.env.NODE_ENV = 'development';\n}\n\nfunction getSrcDir(child) {\n  return process.env.NODE_ENV === 'development'? child: '' + child;\n}\n\nfunction getDistDir() {\n  return process.env.NODE_ENV === 'development'? 'frontend-dist/js': 'src/main/resources/static/js';\n}\n\nfunction getFilesToCopy() {\n  var list =[\n    {from: 'node_modules/bootstrap/dist/css/*', to: '../css/', flatten:true },\n    {from: 'node_modules/bootstrap/dist/fonts/*', to: '../fonts/', flatten:true },\n    {from: 'node_modules/font-awesome/css/*', to: '../css/', flatten:true },\n    {from: 'node_modules/font-awesome/fonts/*', to: '../fonts', flatten:true}\n  ];\n\n  if(process.env.NODE_ENV === 'development') {\n    list.push({from:'src/main/resources/static/images/*', to: '../images', flatten:true});\n  }\n  return list;\n}\n\nfunction getWebpackPlugins() {\n  var arr = [\n    new LodashModuleReplacementPlugin,\n    // it's stupid to copy file one by one, but I haven't figured out another way\n    new CopyWebpackPlugin(getFilesToCopy()),\n    // full moment.js is too big. @see https://github.com/moment/moment/issues/2416\n    new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n    new webpack.DefinePlugin({\n      'process.env': {'NODE_ENV': '\"production\"'}\n    }),\n    new webpack.optimize.OccurrenceOrderPlugin,\n    new webpack.optimize.CommonsChunkPlugin(\"vendor\", \"vendor.bundle.js\"),\n    new HtmlWebpackPlugin({\n      filename: '../index.html',\n      template: path.resolve(__dirname, 'frontend/index.template.ejs'),\n      inject: 'body',\n      cssDir: getSrcDir('/css')\n    })\n    // new webpack.optimize.DedupePlugin() // @see https://github.com/webpack/webpack/issues/1982\n  ];\n  if(process.env.NODE_ENV === 'production') {\n    arr.push(\n      new webpack.optimize.UglifyJsPlugin({\n        // Don't beautify output (enable for neater output)\n        beautify: false,\n        // Eliminate comments\n        comments: false,\n        screw_ie8: true,\n        // Compression specific options\n        compress: {\n          warnings: false,\n          // Drop console statements\n          drop_console: true\n        },\n        // Mangling specific options\n        mangle: {\n          // Don't mangle function names\n          // keep_fnames: true // about 8% js file size increase\n        }\n      })\n    );\n  }\n  return arr;\n}\n\nmodule.exports = {\n  // we don't need source map in dev version because code is NOT uglified\n  devtool: process.env.NODE_ENV === 'production'? 'cheap-module-source-map': null,\n  entry: {\n    app:'./frontend/index.js',\n    vendor: [\n      'core-js',\n      'react',\n      'react-dom',\n      'react-bootstrap',\n      'redux',\n      'redux-thunk',\n      'react-redux'\n    ]\n  },\n  output: {\n    path: path.resolve(__dirname, getDistDir()),\n    filename: 'bundle.js',\n    publicPath: getSrcDir('/js/')\n  },\n  // dev web sever setup which has nothing to do with production code\n  devServer: {\n    historyApiFallback: true,\n    compress: true // less page loading time\n  },\n  plugins: getWebpackPlugins(),\n  resolve: {\n    extensions: ['', '.js', '.jsx'],\n    modules: [\n      'frontend',\n      'node_modules'\n    ],\n    // root for es2015 import\n    // @see http://moduscreate.com/es6-es2015-import-no-relative-path-webpack/\n    root: [\n      path.resolve('./frontend/components')\n    ]\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        loader: \"url-loader?limit=10000&minetype=application/font-woff\"\n      }, {\n        test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        loader: \"file-loader\"\n      }, {\n        test: /\\.css$/,\n        exclude: /node_modules|styles/, //exclude css in `node_modules` and `styles/`\n        loader: 'style-loader!css-loader?localIdentName=[name]__[local]__[hash:base64:5]&modules&importLoaders=1&sourceMap!postcss-loader'\n      }, {\n        test: /\\.css$/,\n        include: /styles/, // global css\n        loader: 'style-loader!css-loader!postcss-loader'\n      }, {\n        test: /\\.css$/,\n        include: /node_modules/,\n        loaders: ['style-loader', 'css-loader']\n      }, {\n        test: /\\.jsx*$/,\n        exclude: [/node_modules/, /.+\\.config.js/],\n        loader: 'babel'\n      }, {\n        test: /\\.(jpe?g|gif|png|svg)$/i,\n        loader: 'url-loader?limit=10000'\n      }, {\n        test: /\\.json$/,\n        loader: 'json-loader'\n      }, {\n        test: /\\.font.(js|json)$/,\n        loader: \"style!css!fontgen?embed&types=woff,eot,ttf\"\n      }\n    ]\n  },\n  postcss: (webpack) => [\n    require('postcss-import')({\n      // where to search styles\n      path: ['frontend/styles'],\n      addDependencyTo: webpack\n    }),\n    require('postcss-simple-vars')({ silent: false}),\n    // though IE9+ already supports calc() out of box\n    require('postcss-calc')({warnWhenCannotResolve: true}),\n    require('postcss-nested')(),\n    require('autoprefixer')({ browsers: ['last 2 versions'] })\n  ]\n};\n\n// Local Variables:\n// coding: utf-8\n// tab-width: 2\n// js-indent-level: 2\n// End:\n" "webpack.conf.js" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/main-webpack.yasnippet" nil nil)
		       ("main" "// Install npm packages:\n//   npm install --save-dev karma phantomjs jasmine-core karma-chrome-launcher karma-phantomjs-launcher karma-firefox-launcher karma-jasmine\n//\n// Run command:\n//    karma start karma.conf.js --single-run --browsers PhantomJS\n//\n// Directory layout:\n//    - scripts/\n//    - deployment/\n//    - node_modules/\n//    - package.json\n//    - gulpfile.js\n//    - karma.conf.js\nvar modules = \"node_modules\";\n\nvar settings = {\n  basePath: './',\n\n  //avoid phantom disconnect, suggestion from:\n  //https://github.com/karma-runner/karma/issues/598\n  browserDisconnectTimeout: 10000,\n  browserDisconnectTolerance: 1,\n  browserNoActivityTimeout: 60000,\n\n  files: [\n    modules + '/moment/min/moment.min.js', // date\n    modules + '/angular/angular.min.js',\n    modules + '/angular-ui-router/release/angular-ui-router.min.js',\n    modules + '/api-check/dist/api-check.min.js',\n    modules + '/angular-formly/dist/formly.js',\n    modules + '/angular-touch/angular-touch.min.js',\n    modules + '/angular-messages/angular-messages.min.js',\n    modules + '/angular-ui-bootstrap/ui-bootstrap-tpls.min.js',\n    'scripts/**/*.js'\n  ],\n  excludes: [\n    'scripts/mocks/**/*', // ignore mock data for frontend\n  ],\n  singleRun: false,\n  autoWatch: true,\n  frameworks: ['jasmine'],\n  browsers: ['Firefox'],\n  plugins: [\n    'karma-chrome-launcher',\n    'karma-phantomjs-launcher',\n    'karma-firefox-launcher',\n    'karma-jasmine'\n  ]\n};\n\nif (process.env.NODE_ENV === \"bamboo\") {\n  settings.browsers = ['PhantomJS'];\n  settings.singleRun = true;\n}\n\nmodule.exports = function(config) {\n  config.set(settings);\n};" "karma.conf.js" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/main-karma.yasnippet" nil nil)
		       ("main" "// Install npm packages:\n//   npm install moment angular angular-mocks angular-ui-router api-check angular-formly angular-touch angular-messages angular-ui-bootstrap\n//   npm install --save-dev del gulp gulp-load-plugins gulp-concat gulp-ng-annotate gulp-rename gulp-uglify gulp-sourcemaps gulp-wrap --save-dev\n//\n// Directory layout:\n//    - scripts/\n//    - deployment/\n//    - node_modules/\n//    - package.json\n//    - gulpfile.js\n//    - karma.conf.js\n//\n// Hint:\n//   You can customize bootstrap and angular-ui-bootstrap\nvar gulp = require('gulp');\nvar $ = require('gulp-load-plugins')(); // lazy load gulp plugins\nvar paths = {\n  dest: './deployment/',\n  modules: './node_modules'\n};\n\ngulp.task('clean', function() {\n  return require('del').sync(paths.dest);\n});\n\ngulp.task('styles', function() {\n});\n\n// lib.js we can trust\ngulp.task('scripts.lib', function() {\n  gulp.src([\n    paths.modules + '/moment/min/moment.min.js', // date\n    paths.modules + '/angular/angular.min.js',\n    paths.modules + '/angular-ui-router/release/angular-ui-router.min.js',\n    paths.modules + '/api-check/dist/api-check.min.js',\n    paths.modules + '/angular-formly/dist/formly.js',\n    paths.modules + '/angular-touch/angular-touch.min.js',\n    paths.modules + '/angular-messages/angular-messages.min.js',\n    paths.modules + '/angular-ui-bootstrap/ui-bootstrap-tpls.min.js'\n  ])\n    .pipe($.concat('lib.js'))\n    .pipe(gulp.dest(paths.dest));\n});\n\n// the app we need debug\ngulp.task('scripts.app', function() {\n\n  gulp.src([\n    './scripts/**/*.js',\n    '!./scripts/mocks/**/*', // ignore mock data for frontend\n    '!./scripts/**/*Test.js' // ignore jasmine test cases\n  ])\n    .pipe($.ngAnnotate()) // cool ng-annotate automatically\n    .pipe($.wrap('(function(){\"use strict\";\\n\\n<%= contents %>\\n\\n})();\\n\\n'))\n    .pipe($.concat('app.js')) // concatenated app.js\n    .pipe(gulp.dest(paths.dest))\n    .pipe($.rename({ // minimized app.js\n      suffix: '.min'\n    }))\n    .pipe($.uglify({\n      mangle: true\n    }))\n    .pipe($.sourcemaps.write('./'))\n    .pipe(gulp.dest(paths.dest));\n});\n\ngulp.task('build', ['clean', 'scripts.app', 'scripts.lib', 'styles']);\ngulp.task('default', ['build']);" "gulp.js main" nil nil
			((yas-indent-line 'fixed))
			"d:/HOME/.emacs.d/snippets/js-mode/main-gulp.yasnippet" nil nil)
		       ("for" "for (var k in ${1:obj}) {\n  if ($1.hasOwnProperty(k)) {\n    var ${2:val} = $1[k];\n    $0 \n  }\n}\n" "loop key/value object" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/loop-key-value.yasnippet" nil nil)
		       ("lo" "console.log('${1:object}=', ${1:$(yas/substr yas-text \"[^ ]*\")});" "console.log(description,object)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/logobject.yasnippet" nil nil)
		       ("lo" "console.log('${1:object}=', JSON.stringify(${1:$(yas/substr yas-text \"[^ ]*\")}));" "console.log(description, JSON.stringify(object))" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/logobject-jsongify.yasnippet" nil nil)
		       ("l" "console.log('${1:hello world}');" "console.log" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/log.yasnippet" nil nil)
		       ("lwf" "console.log('${1:`(my-which-function)`} called');" "console.log function" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/log-which-function.yasnippet" nil nil)
		       ("lwf" "console.log('${1:`(my-which-function)`} called => ', `(my-yas-get-var-list-from-kill-ring)`);\n" "console.log which function with var list from `kill-ring'" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/log-which-function-with-var-list-from-kill-ring.yasnippet" nil nil)
		       ("lwf" "console.log('${1:`(my-which-function)`} called => ', `(mapconcat (lambda (i) (format \"'%s=', %s\" i i)) (split-string (car kill-ring) \",[ \\s\\n]*\") \", \")`);\n" "console.log function&parameters" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/log-which-function-with-para.yasnippet" nil nil)
		       ("lo" "console.log('`(my-yas-escape-string (car kill-ring))`=', `(car kill-ring)`);" "console.log top one in kill-ring" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/log-recent-kill-ring.yasnippet" nil nil)
		       ("lo" "`(mapconcat (lambda (i) (format \"'%s=', %s\" (my-yas-escape-string i) i)) (split-string (car kill-ring) \",[ \\s\\n]*\") \", \")`" "param from kill-ring" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/log-para-from-kill-ring.yasnippet" nil nil)
		       ("lo" "`(mapconcat (lambda (i) (format \"'%s=', %s\" (my-yas-escape-string i) i)) (split-string (my-gclip) \",[ \\s\\n]*\") \", \")`" "param from clipboard" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/log-para-from-clipboard.yasnippet" nil nil)
		       ("lo" "'${1:object}=', ${1:$(yas/substr yas-text \"[^ ]*\")}" "param from user input" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/log-one-object-as-param.yasnippet" nil nil)
		       ("lambda" "(function(v) {\n  $0\n})(${1:externalVar})" "(function(v){...})(externalVar)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/lambda.yasnippet" nil nil)
		       ("lambda" "(function() {\n  $0\n})()" "(function(){...})()" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/lambda-no-param.yasnippet" nil nil)
		       ("lambda" "(function() {\n  // set up css style\n  (function() {\n    var style=''\n      + '${1:div {display:block; }}\\n'\n      ;\n    var styleElement = document.createElement('style');\n    styleElement.type = 'text/css';\n    if (styleElement.styleSheet) {\n      styleElement.styleSheet.cssText = style;\n    } else {\n      styleElement.appendChild(document.createTextNode(style));\n    }\n    document.getElementsByTagName('head')[0].appendChild(styleElement);\n  })();\n\n  //jquery plugin code placed here\n  (function($) {\n    $0\n  })(jQuery);\n\n  //place your code below this line\n  console.log('hello world');\n})();\n" "(function(){ css+js+gif })();" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/lambda-all-in-one.yasnippet" nil nil)
		       ("str" "'`(replace-regexp-in-string \"\\\\(^[ \\t]+\\\\|[ \\t]+$\\\\)\" \"\" (replace-regexp-in-string \"> <\" \"><\" (replace-regexp-in-string \"'\" \"\\\\\\\\'\" (replace-regexp-in-string \"[ \\t]*[\\n\\r]+[ \\t]*\" \" \" (car kill-ring)))))`'" "multi-lines@yank-line => 'one-liner'" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/kill-ring-to-single-quoted-one-liner.yasnippet" nil nil)
		       ("indent" "// Local Variables:\n// coding: utf-8\n// tab-width: ${1:2}\n// js-indent-level: ${1:$(yas/substr yas-text \"[0-9]*\")}\n// End:\n// vim: set fs=javascript fenc=utf-8 et ts=${1:$(yas/substr yas-text \"[0-9]*\")} sts=${1:$(yas/substr yas-text \"[0-9]*\")} sw=${1:$(yas/substr yas-text \"[0-9]*\")}\n" "indent" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/indent.yasnippet" nil nil)
		       ("if" "if (${1:true}) {\n  $0\n} else {\n}\n" "if...else" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/ife.yasnippet" nil nil)
		       ("if" "if (${1:true}) {\n  $0\n}\n" "if" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/if.yasnippet" nil nil)
		       ("if" "if (!`(car kill-ring)`) {\n  `(car kill-ring)` = $0;\n}\n" "if(!`kill-ring`) ..." nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/if-null.yasnippet" nil nil)
		       ("if" "if (`(my-yas-field-to-statement (car kill-ring) \" && \")`) {\n  $0;\n}\n" "`kill-ring` => if(a && a.b ... )" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/if-all-fields.yasnippet" nil nil)
		       ("head-script" "(function() {\n  var script = document.createElement(\"script\");\n  var head = document['head'] || document.getElementsByTagName(\"head\")[0] || document.documentElementroot;\n  // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when a script is finished loading.\n  script.onload = script.onerror = script.onreadystatechange = function () {\n    if (script && (!script.readyState || /loaded|complete/.test(script.readyState))) {\n      // Handle memory leak in IE\n      script.onerror = script.onload = script.onreadystatechange = null;\n      // Remove the script\n      if (script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n      script = null;\n    }\n  };\n  script.type = 'text/javascript';\n  script.src = '${1:http://cdnjs.cloudflare.com/ajax/libs/prettify/r298/lang-lisp.min.js}';\n  // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n  head.insertBefore(script, head.firstChild);\n})();" "load js dynamically" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/head-script.yasnippet" nil nil)
		       ("for" "for(const ${1:v} of ${2:ArrayOrMapOrSetOrString}) {\n  $0\n}" "ES6 `for(const elem of array)`" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/forof.yasnippet" nil nil)
		       ("for" "for (${1:i} = ${2:0}; $1 < $3.length; $1++) {\n  $0\n}\n" "for" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/for.yasnippet" nil nil)
		       ("for" "for(const k of Object.keys(${1:obj})) {\n  $0\n}\n" "for(const k in Object.keys(...))" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/for-keys.yasnippet" nil nil)
		       ("fn" "${1:var }${2:name} = function($0) {\n  console.log('${2:$(yas/substr yas-text \"[^ ]*\")} called');\n};" "[var |this.|$scope.|vm.]name = function() {..}" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/fnlog1.yasnippet" nil nil)
		       ("fn" "function ${1:name}($0) {\n  console.log('${1:$(yas/substr yas-text \"[^ ]*\")} called');\n}" "function fn() {..}" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/fnlog.yasnippet" nil nil)
		       ("promise" "// @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n// var p = new Promise(...); p.then(function() {}).catch(function() {});\nreturn new Promise((resolve, reject) => {\n  var resp = {status: 'OK'};\n  setTimeout(() => {\n    resolve(resp);\n  }, 2000);\n});" "return new Promise(...)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/es6-promise.yasnippet" nil nil)
		       ("import" "import ${1:ComponentName} from '${1:$(yas/substr yas-text \"[^ ]*\")}/${1:$(yas/substr yas-text \"[^ ]*\")}.js';" "import Comp from 'Comp/Comp.js';" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/es6-import.yasnippet" nil nil)
		       ("f" "${1:methodName}($0) {\n}\n" "ES6 method() {..}" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/es6-class-method.yasnippet" nil nil)
		       ("f" "${1:methodName} = ($0) => {\n};\n" "ES6 method = () => {..};" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/es6-class-arrow-method.yasnippet" nil nil)
		       ("d" "console.clear(); debugger;" "debugger;" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/debugger.yasnippet" nil nil)
		       ("d" "if(${1:`(car kill-ring)`}) { console.clear(); debugger; }" "if(boolean-condition-from-kill-ring) { debugger; }" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/debugger-cond-breakpoint-from-kill-ring.yasnippet" nil nil)
		       ("date2str" "${1:var date2str} = function(d) {\n  var formatNum = function(n) {\n    return n<=9? '0' + n : '' + n;\n  };\n  var strDate = d.getFullYear()\n    + '-'\n    + formatNum(d.getMonth() + 1)\n    + '-'\n    + formatNum(d.getDate());\n  return strDate;\n};" "date2str" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/date2string.yasnippet" nil nil)
		       ("str" "'`(replace-regexp-in-string \"\\\\(^[ \\t]+\\\\|[ \\t]+$\\\\)\" \"\" (replace-regexp-in-string \"> <\" \"><\" (replace-regexp-in-string \"'\" \"\\\\\\\\'\" (replace-regexp-in-string \"[ \\t]*[\\n\\r]+[ \\t]*\" \" \" (my-gclip)))))`'" "multi-lines@clipboard => 'one-liner'" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/clipboard-to-single-quoted-one-liner.yasnippet" nil nil)
		       ("f" "$0: {\n  enter: function(path, state) {\n  },\n}," "babel plugin visitor method() {..}" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/babel-plugin-visitor-method.yasnippet" nil nil)
		       ("assert" "`(mapconcat (lambda (s) (format \"assert(%s);\" s)) (my-read-n-from-kill-ring) \"\\n\")`" "assert" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/assert-from-kill-ring.yasnippet" nil nil)
		       ("ar" "($1) => { $0; }" "(...) => { statement; };" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/arrow-fn1.yasnippet" nil nil)
		       ("ar" "($1) => $0" "(...) => expression" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/arrow-fn.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'js-mode
		     '(("awatch" "$scope.$watch('$1', function (newValue, oldValue) {\n  $0\n});\n" "$scope.watch" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/watch.yasnippet" nil nil)
		       ("av" "$scope.$1 = $0;\n" "$scope.name = value;" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/value.assign.yasnippet" nil nil)
		       ("atimeout" "$timeout(function() {\n  $0\n}, ${1:500});\n" "$timout(function() {...});" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/timeout.yasnippet" nil nil)
		       ("aservice" ".service('${1:serviceId}Service', ['$http', function($http){\n  // @see http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory\n  // Service: This function will be new-ed\n  // Factory: This function (constructor) will be invoked\n  // Suggestion: - Factory is more versatile\n  //             - Service is just alias of Factory\n  //             - All you got are Singletons!\n  var that = this;\n  that.data = 0;\n  that.fn1 = function() {\n    that.data++;\n  };\n}])\n" "app.service('serviceIdService', ...)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/service.yasnippet" nil nil)
		       ("f" "$scope.`(replace-regexp-in-string \"(.*) *$\" \"\" (car kill-ring))` = function(`(replace-regexp-in-string \"\\\\(.*( *\\\\| *).*\\\\)\" \"\" (car kill-ring))`) {\n  $0\n};\n" "$scope.fromKillRing = function() {...}" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/scope.function2.yasnippet" nil nil)
		       ("f" "$scope.${1:init} = function(${2:para}) {\n  $0\n  console.log('$scope.${1:$(yas/substr yas-text \"[^ ]*\")} called! ${2:$(yas/substr yas-text \"[^ ]*\")}=', ${2:$(yas/substr yas-text \"[^ ]*\")});\n};\n" "$scope.fname= function(para) {...}" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/scope.function1.yasnippet" nil nil)
		       ("af" "$scope.${1:init} = function() {\n  $0\n  console.log('$scope.${1:$(yas/substr yas-text \"[^ ]*\")} called');\n};" "$scope.fname= function() { ... } (angular)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/scope.function.yasnippet" nil nil)
		       ("aq" "var a = [1, 40, 50, 100, 1000];\nvar promises = [];\n\nangular.forEach(a, function(addr) {\n  // make sure deferred refer to different object\n  var deferred = $q.defer();\n  if(a > 50) {\n    deferred.reject();\n  } else {\n    deferred.resolve(a);\n  }\n  promises.push(deferred.promise);\n});\n\n$q.all(promises).then(function(results) {\n  console.log('results=', results);\n});\n" "$q.all([...]).then(...)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/q.yasnippet" nil nil)
		       ("aq" "// or just return 'hello' in $http.post(...).then(function{ });\nreturn $q.resolve('hello');\n" "$q.resolve('hello')" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/q-resolve.yasnippet" nil nil)
		       ("aq" "// the final resolve result is the return in catch(function() {...})\nreturn $q.reject('reason');\n" "$q.reject('reason')" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/q-reject.yasnippet" nil nil)
		       ("aop" "// https://medium.com/@hackupstate/improving-angular-performance-with-1-line-of-code-a1fb814a6476#.106lbxjiz\nangular.module('myApp').config(['$compileProvider', function ($compileProvider) {\n  $compileProvider.debugInfoEnabled(false);\n}]);" "angular.optimize" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/optimize.yasnippet" nil nil)
		       ("aon" "$scope.$on('$1', function (event, data) {\n  $0\n});" "$scope.$on" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/on.yasnippet" nil nil)
		       ("amodule" "angular.module('$1', [$2]);\n" "angular.module" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/module.yasnippet" nil nil)
		       ("amain" "// insert below items into html:\n// <html ng-app=\"myApp\"> or <body ng-app=\"myApp\">\n//  <script src=\"//cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.13/angular-mocks.js\"></script>\n//  <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.12.0/ui-bootstrap-tpls.min.js\"></script>\n//  <link type=\"text/css\" rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/css/bootstrap.min.css\" />\nangular.module('myApp', ['ui.bootstrap', 'ngMockE2E']).config(function($interpolateProvider) {\n  // if you need deal with django\n  $interpolateProvider.startSymbol('[{');\n  $interpolateProvider.endSymbol('}]');\n})\n.run(function($httpBackend) {\n  // if you need mockup $http\n  $httpBackend.whenPOST('MY_POST_URL').respond(function(method, url, data, headers){\n    return [200, {}, {}];\n  });\n  $httpBackend.whenGET(/^.*/).passThrough();\n})\n.controller('MainCtrl', function ($scope) {\n  $scope.max = 100;\n  $scope.dynamic = 50;\n})\n;\n" "angular.main" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/main.yasnippet" nil nil)
		       ("aon" "$rootScope.$on('$locationChangeSuccess', function (event, newUrl, oldUrl, newState /*optional*/, oldState /*optional*/) {\n  // @see https://docs.angularjs.org/api/ng/service/$location\n  $0\n});\n" "$rootScope.$on('$locationChangeSuccess', ...)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/locationChangeSuccess.yasnippet" nil nil)
		       ("aon" "$rootScope.$on('$locationChangeStart', function (event, newUrl, oldUrl, newState /*optional*/, oldState /*optional*/) {\n  // @see https://docs.angularjs.org/api/ng/service/$location\n  event.preventDefault(); //prevent the transition from happening\n  $0\n});\n" "$rootScope.$on('$locationChangeStart', ...)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/locationChangeStart.yasnippet" nil nil)
		       ("find" "angular.element.find('${1:#selector}')[0]" "angular.element.find('#select')[0]" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/jquery-find.yasnippet" nil nil)
		       ("ahttp" "$http.${1:post}(${2:url}).success(function(resp, status, headers, config) {\n  console.log('resp=', resp);\n  $0\n}).error(function(reason, status, headers, config) {\n  console.log('reason=', reason);\n});\n" "$http.post().success(function() {...}); (angular)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/http.yasnippet" nil nil)
		       ("ahttp" "angular.module('${1:myApp}').factory('${2:http}Injector', ['$q', function($q) {\n  var regex1 = new RegExp('/api/articles/page/([0-9]+)');\n  var regex2 = new RegExp('/dummy/test-articles.json.page=([0-9]+)');\n  return {\n    request: function(config) {\n      // translate the URL from '/api/articles/page/0' to '/dummy/test-articles.json?page=0'\n      if(config.url.match(regex1)) {\n        config.url = '/dummy/test-articles.json?page='+config.url.match(regex1)[1];\n      }\n      return config;\n    },\n    requestError: function(resp) {\n      return $q.reject(resp);\n    },\n    response: function(resp) {\n      var pageId, pageSize = 2;\n      if(resp.config.url.match(regex2)) {\n        pageId = parseInt(resp.config.url.match(regex2)[1], 10);\n        // slick the articles\n        resp.data.articles = resp.data.articles.slice(pageId*pageSize, (pageId+1)*pageSize);\n        // make sure the resp is JSON\n        resp.headers()['content-type'] = 'application/json; charset=utf-8';\n      return resp;\n    },\n    responseError: function (resp) {\n      return $q.reject(resp);\n    }\n  };\n}]).config(['$httpProvider', function($httpProvider) {\n  $httpProvider.interceptors.push('${2:$(yas/substr yas-text \"[^ ]*\")}Injector');\n}]);" "intercept $http" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/http-interceptor.yasnippet" nil nil)
		       ("afieldsvalid" "function isAllFormFieldsValid (fields) {\n    var item;\n    for (var i = 0; i < fields.length; i++) {\n        item = fields[i];\n        if(item && !item.noFormControl ) {\n            // if the item does NOT have formControl property\n            // no need to check it\n            if(item.formControl && (!item.formControl.$valid)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}" "formly.isAllFormFieldsValid()" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/formly-validate-all-fields.yasnippet" nil nil)
		       ("aformly" "// insert below code into index.html:\n// <script src=\"//cdnjs.cloudflare.com/ajax/libs/api-check/7.5.0/api-check.min.js\"></script>\n// <script src=\"//cdnjs.cloudflare.com/ajax/libs/angular-formly/7.0.1/formly.min.js\"></script>\nangular.module('${1:myApp}').config(function (viewPath, formlyConfigProvider) {\n  // copied from https://github.com/formly-js/angular-formly-templates-bootstrap\n  formlyConfigProvider.setWrapper([{\n    name: 'label',\n    templateUrl: '<div> <label for=\"{{id}}\" class=\"control-label\" ng-if=\"to.label\">{{to.label}} {{to.required ? \"*\" : \"\"}}</label><formly-transclude></formly-transclude></div>'\n  }]);\n  formlyConfigProvider.setType({\n    name: 'input',\n    template: '<input class=\"form-control\" ng-model=\"model[options.key]\">',\n    wrapper: ['label']\n  });\n  // insert your own types/wrappers here\n  $0\n}).run(function (formlyConfig, formlyValidationMessages) {\n  formlyConfig.extras.removeChromeAutoComplete = true;\n  formlyValidationMessages.addStringMessage('required', 'This field is required');\n  formlyValidationMessages.messages.parse = function ($viewValue) {\n    return ($viewValue || 'This') + ' is not valid';\n  };\n}).controller('MainController', function ($filter, $state) {\n  var vm = this;\n  vm.init = function() {\n    vm.fields = [\n      {\n        // noFormControl: true,\n        key: 'key1',\n        type: 'input',\n        wrapper: ['label'],\n        templateOptions: {\n          required: true,\n          label: 'hello world'\n        }\n      }\n    ];\n  };\n  vm.init();\n});" "formly setup" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/formly-setup.yasnippet" nil nil)
		       ("afilter" ".filter('${1:filterName}', [${2:$http}, function(${2:$(yas/substr yas-text \"[^ ]*\")}) {\n  return function (input) {\n    return input;\n  };\n}])\n" "angular.filter" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/filter.yasnippet" nil nil)
		       ("afilter" "// <span ng-bind-html=\"... | unsafe\"></span>\n.filter('unsafe',[\"$sce\", function($sce) {\n  return function(val) {\n    return $sce.trustAsHtml(val);\n  };\n}])\n" "raw html, <span ng-bind-html=\"...|unsafe\" />" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/filter-unsafe.yasnippet" nil nil)
		       ("afilter" ".filter('${1:fromAustraliaDateString}', ['$filter', function(filter) {\n  // @see http://stackoverflow.com/questions/13301367/angularjs-extending-built-in-filters\n  return function (str) {\n    if(!str || str === '') {\n        return '';\n    }\n    var d1 = str.split('/');\n    if(d1.length !== 3) {\n        return '';\n    }\n    return filter('date')(new Date(d1[2], (d1[1] - 1), d1[1]), 'dd MMM yyyy');\n  };\n}])\n" "extend built in filter" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/filter-inside-filter.yasnippet" nil nil)
		       ("afilter" "// @see http://stackoverflow.com/questions/16474091/angular-custom-filter-function\n// HTML usage:\n// <div ng-repeat=\"item in items | filter:${1:$(yas/substr yas-text \"[^ ]*\")}(${2:$(yas/substr yas-text \"[^ ]*\")})\">\n$scope.${1:criteriaMatch} = function(${2:criteria }) {\n  return function( item ) {\n    return item.${3:name} === ${2:$(yas/substr yas-text \"[^ ]*\")}.${3:$(yas/substr yas-text \"[^ ]*\")};\n  };\n};\n$filter('filter')(dataSoruce, $scope.${1:$(yas/substr yas-text \"[^ ]*\")}(${2:$(yas/substr yas-text \"[^ ]*\")}));\n" "$filter('filter')(dataSoruce, functor(criteria));" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/filter-custom.yasnippet" nil nil)
		       ("afilter" "${1:dstArray} = $filter('filter')(${2:srcArray}, function(item) {\n  // boolean or null means *item* is removed from result\n  // or else just return the item\n  return item.${3:prop} !== $0;\n});\n" "var rlt = $filter('filter')(srcArray, function(item) { ... });" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/filter-as-function.yasnippet" nil nil)
		       ("afactory" ".factory('${1:serviceId}Factory', ['$http', function($http){\n  // @see http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory\n  // Service: This function will be new-ed\n  // Factory: This function (constructor) will be invoked\n  // Suggestion: - Factory is more versatile\n  //             - Service is just alias of Factory\n  //             - All you got are Singletons!\n  var globalStorage = {};\n  $0\n  return globalStorage;\n}])\n" "app.factory('serviceIdService', ...)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/factory.yasnippet" nil nil)
		       ("aemit" "$scope.$emit('${1:eventHello}', data);\n" "$scope.$emit (fire event up $scope)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/emit.yasnippet" nil nil)
		       ("adirective" ".directive('${2:prefixDirectiveId}', function ($3) {\n  // @see https://docs.angularjs.org/guide/directive\n  return function (scope, element, attrs) {\n    $0\n  };\n})" "angular.directive" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/directive.yasnippet" nil nil)
		       ("adirective" ".directive('${1:inputCurrency}', function($filter) {\n  return {\n    restrict: 'A', // A - attribute, E - element/name, C - attribute/name\n    require: 'ngModel',\n    link: function(scope, element, attr, ctrl) {\n      var elementFocused;\n      var forceDataBinding = function(ctrl) {\n        var value = ctrl.$modelValue, formatters = ctrl.$formatters, idx;\n        if(!value) {\n            // because user input invalid data, we'd better not update the view\n            return;\n        }\n        idx = formatters.length;\n        while(idx--) {\n          value = formatters[idx](value);\n        }\n        if (ctrl.$viewValue !== value) {\n          ctrl.$viewValue = value;\n          ctrl.$render();\n        }\n      };\n      element.on('focus', function () {\n        elementFocused = true;\n        forceDataBinding(ctrl);\n      });\n      element.on('blur', function () {\n        elementFocused = false;\n        forceDataBinding(ctrl);\n      });\n      // or ctrl.$parsers.unshift(...)\n      ctrl.$parsers.push(function (origVal) {\n        if (origVal === undefined || origVal === '') return origVal;\n        // you can only input digits here\n        var transformedInput = origVal.replace(/[^0-9]/g, '');\n        if (transformedInput !== origVal) {\n          // force update the view\n          ctrl.$setViewValue(transformedInput);\n          ctrl.$render();\n        }\n        origVal = transformedInput;\n        // from user input\n        return origVal;\n      });\n      ctrl.$formatters.push(function (origVal) {\n        // to user display\n        if(elementFocused === true) {\n          return origVal;\n        }\n        return  $filter('currency')(origVal,'');\n      });\n    }\n  };\n})" "two way binding <div ng-model=\"...\" input-currency />" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/directive-two-way.yasnippet" nil nil)
		       ("adirective" "var innerScope = angular.element(angular.element.find('${1:directiveTag}')[0]).isolateScope();" "innerScope = directive.isolateScope()" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/directive-scope.yasnippet" nil nil)
		       ("adirective" ".directive('${1:prefixDirectiveId}', function ($0) {\n  // @see https://docs.angularjs.org/guide/directive\n  return {\n    transclude: true,\n    replace: true,\n    scope: {},\n    template:'<div class=\"panel panel-default\"><div class=\"panel-heading\"><a ng-if=\"attrs.buttonSref\" class=\"pull-right view-link\" ui-sref=\"{{attrs.buttonSref}}\"><i class=\"fa fa-chevron-right\"></i></a><h3><i ng-if=\"attrs.iconStyles\" class=\"{{::attrs.iconStyles}}\"></i>{{::attrs.title}}</h3></div><div class=\"panel-body\"><ng-transclude></ng-transclude></div></div>',\n    link: function(scope, element, attrs, controller) {\n      scope.attrs = attrs;\n    }\n  };\n})" "angular.directive (plain html panel)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/directive-plain-html.yasnippet" nil nil)
		       ("adirective" "// <div ng-model=\"...\" number-only ></div>\n// could be a general directive eating illegal characters\n.directive('${1:numberOnly}', function() {\n  function link(scope, element, attrs, ctrl) {\n    // ngModel from {require:'ngModel'}\n    // @see https://docs.angularjs.org/guide/directive\n    // analyze user input, so user need press key or move mouse at first\n    ctrl.$parsers.push(function (origVal) {\n      if (!origVal) {\n          return '';\n        }\n      var newVal = origVal.replace(/[^0-9]/g, '');\n      if (newVal !== origVal) {\n      ctrl.$setViewValue(newVal);\n      ctrl.$render();\n      }\n      return newVal;\n    });\n  }\n  return {\n    restrict: 'A', // A - match attribute, E - match element name, C, match attribute name\n    require: 'ngModel',\n    link: link\n  };\n})" "<div ng-model=\"...\" filter-user-input />" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/directive-nonumber.yasnippet" nil nil)
		       ("acontroller" ".controller('${1:MyController}', ['$scope', '${2:$(yas/substr yas-text \"[^ ]*\")}', function ($scope, ${2:$http}) {\n  console.log('${1:$(yas/substr yas-text \"[^ ]*\")} registered');\n  var that = this;\n  $scope.fn1 = function () {\n    $0\n  };\n}])\n" "angular.controller" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/controller.yasnippet" nil nil)
		       ("acontroller" " // Initialize the super class and extend it.\n // Note inject from ParentController is AUTOMATICALLY injected\n angular.extend(this, $controller('${1:ParentController}', {$scope: $scope}));" "extend angular controller from parent" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/angular/controller-extend.yasnippet" nil nil)
		       ("abroadcast" "$scope.$broadcast('${1:eventHello}', data);" "$scope.$broadcast (fire event down $scope)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular/broadcast.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'js-mode
		     '(("aif" "// You also need insert below code\n// $stateProvider.state('someState', {\n//     params: {\n//         ${1:$(yas/substr yas-text \"[^ ]*\")}: null\n//     }\n// });\nif(!$stateParams.${1:paraName}) {\n  $0\n}\n" "if(!$stateParams.paraName) { ... }" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular-ui/stateParams.yasnippet" nil nil)
		       ("aon" "$rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n  $0\n});\n" "$rootScope.$on('$stateChangeSuccess', ...);" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular-ui/stateChangeSuccess.yasnippet" nil nil)
		       ("aon" "$rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n  event.preventDefault(); //prevent the transition from happening\n  $0\n});\n" "$rootScope.$on('$stateChangeStart', ...)" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular-ui/stateChangeStart.yansnippet" nil nil)
		       ("aon" "$rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {\n  console.log('stateChangeError called. error=', error);\n});\n" "$rootScope.$on('$stateChangeError', ...);" nil
			("angular")
			nil "d:/HOME/.emacs.d/snippets/js-mode/angular-ui/stateChangeError.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'js-mode
		     '(("jas" "it('$0', function(){\n  expect(true).toBe(true);\n});" "jasmine it" nil
			("jasmine")
			nil "d:/HOME/.emacs.d/snippets/js-mode/jasmine/jasmine-it" nil nil)
		       ("jas" "expect(true).toBe(true);\n" "jasmine expect" nil
			("jasmine")
			nil "d:/HOME/.emacs.d/snippets/js-mode/jasmine/jasmine-expect" nil nil)
		       ("jasmine-describe" "# -*- mode: snippet -*-\n# group: jasmine\n# name: jasmine describe\n# key: jas\ndescribe('$1', function(){\n  beforeEach(function(){\n  });\n\n  afterEach(function(){\n  });\n\n  it('description', function(){\n    expect(true).toBe(true);\n  });\n\n});" "jasmine-describe" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/jasmine/jasmine-describe" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'js-mode
		     '(("tooltip" "// /* MyTooltip.css: */\n// $arrowHeight: 16px;\n// $tooltipMargin: 5px;\n// $tooltipColor: #AFAFAF;\n// $tooltipTextcolor: white;\n// .tooltip {\n//   background-color: $tooltipColor;\n//   font-size: 14px;\n//   position: fixed;\n//   display: block;\n//   color: $tooltipTextcolor;\n//   padding: 16px;\n//   z-index: 99999;\n//   text-align: center;\n//   text-decoration: none;\n//   border-radius: 16px;\n//   -ms-filter:\"progid:DXImageTransform.Microsoft.Dropshadow(OffX=2, OffY=10, Color='#000')\";\n//   filter: drop-shadow(rgba(0, 0, 0, 0.3) 0 2px 10px);\n// }\n// .top {\n//   margin-top: calc(-$tooltipMargin - $arrowHeight);\n//   &:after {\n//     border: $arrowHeight solid;\n//     border-color: $tooltipColor transparent transparent transparent;\n//     content: \"\";\n//     left: 50%;\n//     margin-left: -10px;\n//     position: absolute;\n//     top: 100%;\n//   }\n// }\n// .bottom {\n//   margin-top: calc($tooltipMargin + $arrowHeight);\n//   &:after {\n//     border: $arrowHeight solid;\n//     border-color: transparent transparent $tooltipColor transparent;\n//     content: \"\";\n//     left: 50%;\n//     margin-left: -$arrowHeight;\n//     position: absolute;\n//     bottom: 100%;\n//   }\n// }\n\n// Usage:\n// <MyTooltip\n//   trigger={ this.state.tooltipTrigger }\n//   getTriggerRect={ optionalFunction }>\n//   placement={optionalPlacement}\n//   <div>hello world, bye world</div>\n// </MyTooltip>\n// tooltip is displayed if and only if trigger is not null!\n// If getTriggerRect is defined, we try to use props.getTriggerRect(rect) to\n// get the trigger's position and size. For example, we expect result should be\n// {left: 9, right: 50, top: 14, bottom: 90 }\n// Or else, trigger.getBoundingClientRect() is used.\nimport React from 'react';\nimport st from './MyTooltip.css';\n\nexport default class MyTooltip extends React.Component {\n\n  render() {\n    const { placement, trigger, getTriggerRect } = this.props;\n    let placementStyles = {};\n\n    if (!trigger) {\n      return null;\n    }\n    console.log('MSSimpleTooltip.js: render called => ', 'trigger=', trigger);\n    const triggerRect = getTriggerRect? getTriggerRect(trigger):trigger.getBoundingClientRect();\n\n    if(placement === 'top') {\n      placementStyles = {\n        left: triggerRect.left + (triggerRect.right - triggerRect.left) / 2,\n        top: triggerRect.top,\n        transform: 'translate(-50%, -100%)'\n      };\n    } else if (placement === 'bottom') {\n      placementStyles = {\n        left: triggerRect.left + (triggerRect.right - triggerRect.left) / 2,\n        top: triggerRect.bottom,\n        transform: 'translateX(-50%)'\n      };\n    } else {\n      return null;\n    }\n\n    return (\n      <div className={ \\`\\${st.tooltip} \\${st[placement]}\\` } style={ placementStyles } >\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nMyTooltip.propTypes = {\n  placement: React.PropTypes.oneOf(['top', 'bottom'])\n};\n\nMyTooltip.defaultProps = {\n  placement: 'bottom'\n};" "tooltip using postcss and reactjs" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/tooltip.yasnippet" nil nil)
		       ("this" "this.state.$0" "this.state.whatever" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/this.state.yasnippet" nil nil)
		       ("this" "this.setState({\n  $0\n});" "this.setState({...})" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/this.setstate.yasnippet" nil nil)
		       ("this" "this.props.$0" "this.props.whatever" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/this.props.yasnippet" nil nil)
		       ("this" "if(this.props.${1:fn}) { this.props.${1:$(yas/substr yas-text \"[^ ]*\")}($0); }" "if(this.props.fn) { this.props.fn(para) }" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/this.props.fn.yasnippet" nil nil)
		       ("spinner" "// USAGE:\n//  <LoadingSpinner visible={true} />\nimport React from 'react';\n// Optional\nimport st from './LoadingSpinner.css';\n\n// /* LoadingSpinner.css */\n// .loadingWrapper {\n// text-align: center;\n// padding: 64px;\n// width: 100%;\n// }\n// .loading {\n// font-size: 32px;\n// line-height: 64px;\n// }\n\nexport class MyIcon extends React.Component {\n  getClassName() {\n    return this.props.className? this.props.className:'';\n  }\n\n  render() {\n    return (\n      <i className={\\`fa fa-\\${this.props.glyph} fa \\${this.getClassName()}\\`} aria-hidden=\"true\" />\n    );\n  }\n}\n\nexport default class LoadingSpinner extends React.Component {\n  render() {\n    return (\n      <div className={ \\`\\${this.props.visible? '': 'hidden'} \\${st.loadingWrapper}\\`}>\n        <MyIcon glyph=\"spinner\" className=\"fa-spin fa-4x\" />\n        <span className={st.loading}>Loading ...</span>\n      </div>\n    );\n  }\n}" "spinner icon using font-awesome" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/spinner.yasnippet" nil nil)
		       ("props" "let { `(mapconcat (lambda (s) (replace-regexp-in-string \"this\\.props\\.\" \"\" s)) (delete-dups (string-all-matches \"this\\.props.\\.[a-zA-Z][a-zA-Z0-9]*\" (buffer-substring-no-properties (point-min) (point-max)))) \", \")`, ...props } = this.props;" "let { a, b, ...props } = this.props;" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/simplify-props.yasnippet" nil nil)
		       ("r" "return(\n);" "return (...);" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/return.yasnippet" nil nil)
		       ("main" "import React from 'react';\n// Optional\nimport st from './`(file-name-base buffer-file-name)`.css';\n\nexport default class `(file-name-base buffer-file-name)` extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n      <h1>Hello, this is `(file-name-base buffer-file-name)`</h1>\n    );\n  }\n}" "react lightweight component" nil nil
			((yas-indent-line 'fixed))
			"d:/HOME/.emacs.d/snippets/js-mode/react/react-lightweight-component.yasnippet" nil nil)
		       ("main" "// Directory layout:\n//   - frontend/index.js\n//   - frontend/index.template.ejs (used by HtmlWebpackPlugin, @see html5-webpack.yasnippet)\n//   - frontend/components/Home/Home.js\n//   - frontend/components/Dashboard/Dashboard.js\n//   - frontend/styles/ (storing global css files)\n//   - frontend-dist/\n//   - node_modules/\n//   - package.json (@see package-reactjs.yasnippet)\n//   - webpack.config.js (@see main-webpack.yasnippet)\n//   - .babelrc (@see main-webpack.yasnippet)\n\nrequire('es5-shim'); //ie 9\n\n// Client entry point\nimport React from 'react';\nimport { Router, Route, browserHistory } from 'react-router';\nimport { render } from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'; // reducer could resolve the promise\nimport { Provider } from 'react-redux';\nimport { syncHistoryWithStore, routerReducer } from 'react-router-redux'; // route saved into store\nimport update from 'immutability-helper';\n\n// Base stylesheet (OPTIONAL)\n//require('./styles/main.css');\n\n// Initialize store\nfunction rootReducer(storeState={}, action) {\n  var finalStoreState;\n  switch (action.type) {\n  case 'EVT_DO_STH':\n    finalStoreState = update(storeState, {foo: {$set: action.foo}});\n    break;\n  default:\n    // return original state\n    finalStoreState = storeState;\n  }\n  return finalStoreState;\n};\nconst store = createStore(\n  combineReducers({\n    app:rootReducer,\n    routing: routerReducer\n  }),\n  {}, /* initial state */\n  applyMiddleware(thunk)\n);\n\n// master page stylesheet\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    // \"a full width container, spanning the entire width of your viewport', quoted from bootstrap docuemntation\n    return(<div>{this.props.children}</div>);\n  }\n}\n\nfunction getRoutePath(p) {\n  return (process.env.NODE_ENV === 'production'? '/':'/') + (p? p:'');\n}\n\n// the path is relative to the root directory which defined in webpack.config.js\n//\n// resolve: {\n//   extensions: ['', '.js', '.jsx'],\n//   modules: [\n//     'frontend',\n//     'node_modules'\n//   ],\n//   // root for es2015 import\n//   // @see http://moduscreate.com/es6-es2015-import-no-relative-path-webpack/\n//   root: [\n//     path.resolve('./frontend/components')\n//   ]\n// }\nconst rootRoute = {\n  // We use dynamic routes which can be changed programmically\n  // @see https://github.com/ReactTraining/react-router/blob/master/docs/API.md\n  path: getRoutePath(), // the reason we use dynamic route\n  component: App,\n  indexRoute: {\n    getComponent: (nextState, cb) => {\n      require.ensure([], require => {\n        // use `./Home/Home.js` if you prefer relative index.js\n        cb(null, require('Home/Home.js').default);\n      });\n    }\n  },\n  childRoutes: [\n    {\n      path: 'dashboard',\n      getComponent:(nextState, cb) => {\n        require.ensure([], require => {\n          cb(null, require('Dashboard/Dashboard.js').default);\n        });\n      }\n    }\n  ]\n};\nconst history = syncHistoryWithStore(browserHistory, store);\n\nrender(\n  <Provider store={store}>\n    <Router history={history}>\n      {rootRoute}\n    </Router>\n  </Provider>,\n  document.getElementById('app')\n);" "react main app" nil nil
			((yas-indent-line 'fixed))
			"d:/HOME/.emacs.d/snippets/js-mode/react/react-indexjs.yasnippet" nil nil)
		       ("main" "import React from 'react';\nimport { connect } from 'react-redux';\n// Optional\nimport st from './`(file-name-base buffer-file-name)`.css';\n\nexport class `(file-name-base buffer-file-name)` extends React.Component {\n  componentDidMount() {\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    return (\n      <h1>Hello, this is `(file-name-base buffer-file-name)`</h1>\n    );\n  }\n}\n\n// latest way to use react-router 2.x\n`(file-name-base buffer-file-name)`.contextTypes = {\n    // @see https://github.com/grommet/grommet/issues/441\n    router: React.PropTypes.object.isRequired\n};\n\nexport default connect(\n  function (storeState) {\n    // store state to props\n    return {\n    };\n  }\n)(`(file-name-base buffer-file-name)`);" "react component" nil nil
			((yas-indent-line 'fixed))
			"d:/HOME/.emacs.d/snippets/js-mode/react/react-component.yasnippet" nil nil)
		       ("dropdown" "<DropdownButton\n  title={ this.state.${1:key}}\n  id=\"${1:$(yas/substr yas-text \"[^ ]*\")}\"\n>\n  <MenuItem eventKey=\"val1\" key=\"val1\" onClick={ () => this.setState({${1:$(yas/substr yas-text \"[^ ]*\")}: 'val1'}) }>\n    val1\n  </MenuItem>\n  <MenuItem eventKey=\"val2\" key=\"val2\" onClick={ () => this.setState({${1:$(yas/substr yas-text \"[^ ]*\")}: 'val2'}) }>\n    val2\n  </MenuItem>\n</DropdownButton>" "DropdownButton from `react-bootstrap`" nil nil
			((yas-indent-line 'fixed))
			"d:/HOME/.emacs.d/snippets/js-mode/react/react-bootstrap-dropdown-button.yasnippet" nil nil)
		       ("ar" "onChange={evt => this.setState({$0: evt.target.value})}\n" "React onChange: (evt) => expression" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/onchange.yasnippet" nil nil)
		       ("modal" "// npm install --save react-redux-form react-bootstrap\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Modal,\n  FormGroup,\n  ControlLabel,\n  Col\n} from 'react-bootstrap';\n\nimport { LocalForm, Control, Errors, Field } from 'react-redux-form';\n\nfunction validatorRequired(val) {\n  return val && val.length > 0;\n}\n\nexport class FormInput extends React.Component {\n  getFormControlWidth() {\n    return 12 - this.getLabelWidth();\n  }\n\n  getLabelWidth() {\n    return this.props.labelWidth? this.props.labelWidth: 2;\n  }\n\n  showErrors(field) {\n    console.log('FormInput.showErrors called => ', 'field=', field);\n    return field.touched && !field.focus;\n  }\n\n  render() {\n    // please use '<input>' instead of 'FormControl', react-redux-form problem\n    return (\n      <FormGroup>\n        <Col sm={ this.getLabelWidth() }>\n          <ControlLabel>\n            {this.props.children}\n          </ControlLabel>\n        </Col>\n        <Col sm={ this.getFormControlWidth() }>\n          <Field model={this.props.model}>\n            <input className=\"form-control\" type={this.props.type?this.props.type:'text'}/>\n          </Field>\n          <small>\n            <Errors model={this.props.model} messages={this.props.messages} show={this.showErrors} />\n            {\n              this.props.extraModel? <Errors model={this.props.extraModel} messages={this.props.messages} show={this.showErrors} />:null\n            }\n          </small>\n        </Col>\n      </FormGroup>\n    );\n  }\n}\n\nfunction validatorNewPasswordsMatch(user) {\n  return user.newPassword === user.confirmNewPassword;\n};\n\nexport class `(file-name-base buffer-file-name)` extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formValidators = {\n      '': { newPasswordsMatch:validatorNewPasswordsMatch},\n      oldPassword: { required: validatorRequired },\n      newPassword: { required: validatorRequired },\n      confirmNewPassword: { required:validatorRequired }\n    };\n    this.close = this.close.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  close() {\n    // case 'EVT_SHOW_`(upcase (file-name-base buffer-file-name))`':\n    //  finalStoreState = update(storeState, {show`(file-name-base buffer-file-name)`: {$set: action.show`(file-name-base buffer-file-name)`}});\n    //  break;\n    this.props.dispatch({\n      type: 'EVT_SHOW_`(upcase (file-name-base buffer-file-name))`',\n      show`(file-name-base buffer-file-name)`: false\n    });\n  }\n\n  save(values) {\n    var self = this;\n    console.log('values=', values);\n  }\n  render() {\n    return (\n      <Modal show={this.props.show`(file-name-base buffer-file-name)`} onHide={ this.close }>\n        <LocalForm model=\"user\"\n                   validators={this.formValidators}\n                   onSubmit={this.save}\n                   className=\"form-horizontal\">\n          <Modal.Header closeButton>\n            <Modal.Title>Change Password</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <FormInput type=\"password\"\n                         labelWidth={5}\n                         messages={{required: 'Required'}}\n                         model=\".oldPassword\"\n                         autoFocus>\n              Old Password *\n            </FormInput>\n            <FormInput type=\"password\"\n                         labelWidth={5}\n                         messages={{required: 'Required'}}\n                         model=\".newPassword\">\n              New Password *\n            </FormInput>\n            <FormInput type=\"password\"\n                         labelWidth={5}\n                         messages={{required: 'Required', newPasswordsMatch: 'Password and confirm password does not match'}}\n                         model=\".confirmNewPassword\"\n                         extraModel=\"user\">\n              Confirm New Password *\n            </FormInput>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button type=\"submit\">OK</Button>\n            <Button onClick={ this.close }>Cancel</Button>\n          </Modal.Footer>\n        </LocalForm>\n      </Modal>\n    );\n  }\n}\n\n\n// latest way to use react-router 2.x\n`(file-name-base buffer-file-name)`.contextTypes = {\n    // @see https://github.com/grommet/grommet/issues/441\n    router: React.PropTypes.object.isRequired\n};\n\nexport default connect(\n  function (storeState) {\n    // store state to props\n    return {\n      show`(file-name-base buffer-file-name)`: storeState.app.show`(file-name-base buffer-file-name)`\n    };\n  }\n)(`(file-name-base buffer-file-name)`);" "modal with form validation (react-redux-form required)" nil nil
			((yas-indent-line 'fixed))
			"d:/HOME/.emacs.d/snippets/js-mode/react/modal-validation.yasnippet" nil nil)
		       ("icon" "// USAGE:\n//   <MyIcon glyph=\"users\" className=\"fa-4x\" />\n//   Please note className is optional!\nimport React from 'react';\n\nexport default class MyIcon extends React.Component {\n  getClassName() {\n    return this.props.className? this.props.className:'';\n  }\n\n  render() {\n    return (\n      <i className={\\`fa fa-\\${this.props.glyph} fa \\${this.getClassName()}\\`} aria-hidden=\"true\" />\n    );\n  }\n}" "icon using font-awesome" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/glyphicon.yasnippet" nil nil)
		       ("dispatch" "// copy below code into reducer.js\n// case '${1:$(yas/substr yas-text \"[^ ]*\")}':\n//   finalStoreState = { ...storeState, ${2:$(yas/substr yas-text \"[^ ]*\")}: action.${2:$(yas/substr yas-text \"[^ ]*\")} };\n//   break;\nthis.props.dispatch({\n  type: '${1:EVT_SHOW_STH}',\n  ${2:showSth}: true\n});" "react simple dispatch" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/dispatch.yasnippet" nil nil)
		       ("dispatch" "// copy below code into reducer.js\n// case '${1:$(yas/substr yas-text \"[^ ]*\")}':\n//   finalStoreState = { ...storeState, ${2:$(yas/substr yas-text \"[^ ]*\")}: action.${2:$(yas/substr yas-text \"[^ ]*\")} };\n//   break;\nthis.props.dispatch(function(dispatch) {\n  return postJSON('/', {\n  }).then(function(resp) {\n    return dispatch({\n      type: '${1:EVT_SHOW_STH}',\n      ${2:showSth}: true\n    });\n  });\n}).then(function(resp) {\n  console.log('data in store. resp=', resp);\n});" "dispatch with promise (redux-thunk required)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/dispatch-promise.yasnippet" nil nil)
		       ("this" "this.${1:fn} = this.${1:$(yas/substr yas-text \"[^ ]*\")}.bind(this);" "this.fn = this.fn.bind(this)" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/bind.this.yasnippet" nil nil)
		       ("this" "`(mapconcat (lambda (s) (replace-regexp-in-string \"^ *this\\.\\\\([^( ]*\\\\) *(\" \"\\\\1\" s)) (delete-dups (string-all-matches \"this\\.[a-zA-Z][a-zA-Z0-9]* *(\" (buffer-substring-no-properties (point-min) (point-max)))) \"\\n\")`" "list all methods in ES6 class" nil nil nil "d:/HOME/.emacs.d/snippets/js-mode/react/all-class-methods.yasnippet" nil nil)))


;;; Do not edit! File generated at Mon Dec 14 20:36:35 2020
